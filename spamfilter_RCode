setwd("/Users/MBP07/Desktop/UVA/Fall 2012/SYS 6021")
source("ROC.R")
source("Testset.R")
source("PCAplots.R")
source("pc.glm.R")
source("SPM_Panel.R")
source("AccidentInput.R")

library(MASS)
library(lattice)

setwd("/Users/MBP07/Desktop/UVA/Fall 2012/SYS 6021/Spam Project")
spam <- read.table("spam_ts.csv", sep = ",", header = T)
ham <- read.table("ham_ts.csv", sep = ",", header = T)
spamtxt <- read.table("Spam.txt", sep = ",", header=T)
setwd("/Users/MBP07/Desktop/UVA/Fall 2012/SYS 6021")

summary(spam)
summary(ham)
summary(spamtxt)

uva.pairs(spam[,c(1:10,58)])

Lspam <- log(spam[,1:58]+.01)
uva.pairs(Lspam[,c(1:10,58)])

pairs(data.frame(Lspam))

par(mfrow = c(3,3))
for(i in 1:9)
{
boxplot(spam[,i]~spam[,58], xlab = "Type of Email", ylab = "Count", main = paste("Variable", i)) 
}

par(mfrow = c(1,1))


##October 10, 2012### MISSED CLASSSSS

par(mfrow = c(3,3))
for(i in 1:9)
{
boxplot(spam[,i]~spam[,58], xlab = "Type of Email", ylab = "Count", main = paste("Variable", i)) 
}

par(mfrow = c(1,1))

##October 15, 2012##

#####Hull Hypo: 



spam.glm <- glm(V58~., data = spam, family = binomial)
spam.glm2 <- glm(V58~. +(V5+V6+V7)^2, data = spam, family = binomial)

anova(spam.glm, spam.glm2, test= "Chi")

summary(spam.glm)

#Perform a model utility test for the glm, use ing Chi2 statictic
spam.null <- glm(V58~1, data = spam, family = binomial)
anova(spam.null, spam.glm, test = "Chi")

#Create a model with just the captal letters at predictors 
spam.cap <- glm(V58~., data = spam[,55:58], family = binomial)
	#Same Thing
spam.cap <- glm(V58~V55+V56+V57, data = spam, family = binomial)

anova(spam.null, spam.cap, test = "Chi")

##Use liklihood ratio or partial chi test to compare the full main effects model wiht the capital letter ##HINT Use the anova() function but with additional parameter setting test "Chi"

anova(spam.glm, spam.cap, test = "Chi")

##Go with the Big Model because Deviance is Greater##

library(MASS)

exp(spam.glm$coefficients[52] -1)*100

drop1(spam.glm, response~., test = "Chi", data = spam)  #Asymptotic Result -- Best test availabel for likelihood results

warnings(spam.glm)

##LSPAM
Lspam <- log(spam[,1:57]+.01)
Lspam <- cbind(Lspam, V58 = spam[,58])

lspam.glm <- glm(spam$V58~., data = Lspam, family = binomial)

##October 17, 2012##

lspam.glm2 <- glm(spam$V58~. +(V5+V6+V7)^2, data = Lspam, family = binomial)

anova(lspam.glm, lspam.glm2, test = "Chi")

summary(spam.glm)
summary(spam.glm2)
summary(lspam.glm) ##Lowest AIC WINS
summary(lspam.glm2)

spam.pca<-princomp(spam[,-58], cor = T)
var.comp(spam.pca)


#**************************************************
#
# Test and taining sets
#
#**************************************************

# Obtain test and training sets from the spam data
# Make the test set 1/3 of the size of spam
# Use test.set()

Spam <- test.set(spam, .33)

response.train <- Spam$train[,58]

response.test <- Spam$test[,58]


#*****************************
#
# GLM with training data
#
#*****************************

# Obtain a GLM with all predictor variables
# using the training data

spam.glm <- glm(V58~., data = Spam$train, family = binomial(link=probit))
##Why does this not converge??



# Obtain a GLM with the log transform of all predictor variables
# using the training data

LSpam.train <- log(Spam$train[,-58] + .01)

Lspam.glm <- glm(Spam$train[,58]~., LSpam.train, family = binomial(link=probit))

######
family = binomial(link=probit)
###### <- 

# Here is an example of how to 
# obtain a GLM with principal components
# accounting for 90% of the variance
# using the training data.


spam.pca <- princomp(Spam$train[,-58], cor = T)

spampca.glm90 <- pc.glm(spam.pca, 90, Spam$train[,58])


# Obtain a GLM with principal components
# accounting for 98% of the variance.
# Use the training data

spam.pca <- princomp(Spam$train[,-58], cor = T)

spampca.glm98 <- pc.glm(spam.pca, 98, Spam$train[,58])

#*****************************
#
# Predictions with test data
#
#*****************************


# Use the test data to obtain predictions for the 
# GLM with all predictor variables


spam.pred <- predict(spam.glm, type = "response", newdata = Spam$test)

# Use the test data to obtain predictions for the 
# GLM with the log transform of all predictor variables


Lspam.test <- log(Spam$test +.01)

Lspam.pred <- predict(Lspam.glm, type = "response", newdata = Lspam.test)


# Use the test data to obtain predictions for the 
# GLM with principal components
# accounting for 98% of the variance.

spampca.pred <- predict.pc.glm(spampca.glm98, spam.pca,Spam$test[,1:57] )

#*****************************
#
# score tables OR ## DIFFUSION MATRIX
#
#*****************************

# Set the decision threshold to 0.5 
# compute score tables for each model

score.table(spam.pred, Spam$test[,58], .5)

score.table(Lspam.pred, Spam$test[,58], .5)

score.table(spampca.pred, Spam$test[,58], .5)


# Set the decision threshold to 0.6 
# compute score tables for each model

score.table(spam.pred, Spam$test[,58], .6)

score.table(Lspam.pred, Spam$test[,58], .6)

score.table(spampca.pred, Spam$test[,58], .6)


# Which model would you choose for your filter?



#*****************************
#
# ROC Curves
#
#*****************************




plot.roc(spam.pred, Spam$test[,58], main = "ROC Curve - SPAM Filter")

lines.roc(Lspam.pred, Spam$test[,58], col = "orange")

lines.roc(spampca.pred, Spam$test[,58], col = "green")

legend(.6, .4, legend = c("Main Effects", "Log", "Prin. Comp."), col = c("blue", "orange", "green"), lwd = 1)

# which model would you choose for your filter?


####October 24, 2012####

##Time Series##

ham.ts<-ts(ham[which(ham$year==2000),]$count)
spam.ts<-ts(spam[which(spam$year==2005),]$count)
summary(spam.ts)
summary(ham.ts)

install.packages("forecast", dependencies=T)

plot(ham.ts)
plot(spam.ts)

#Auto-correlations
acf(spam.ts)
acf(ham.ts)

##Predictor Variables
time.spam<-c(1:length(spam.ts))
time.ham<-c(1:length(ham.ts))

##Build Linear Model (time is = length from 1 to )
time.spam.lm<-lm(spam.ts~time.spam) ##Time is not significant (.6891)
time.ham.lm<-lm(ham.ts~time.ham) ##Time is significant (.000298)

summary(time.spam.lm)
summary(time.ham.lm)

plot(ham.ts)
abline(time.ham.lm, col="red")

plot(spam.ts)
abline(time.spam.lm, col="red")

##Seasonal 
season<-as.factor(time.spam%%7)
summary(season)

##Base Case for Week is Sunday
season.spam<-as.factor(time.spam%%7)
season.ham<-as.factor(time.ham%%7)
spam.season<-lm(spam.ts~time.spam+season.spam)
ham.season<-lm(ham.ts~time.ham+season.ham)
summary(spam.season)
summary(ham.season)
